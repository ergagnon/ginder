// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: protos/rawtext.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RawTextClient is the client API for RawText service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RawTextClient interface {
	Extract(ctx context.Context, opts ...grpc.CallOption) (RawText_ExtractClient, error)
}

type rawTextClient struct {
	cc grpc.ClientConnInterface
}

func NewRawTextClient(cc grpc.ClientConnInterface) RawTextClient {
	return &rawTextClient{cc}
}

func (c *rawTextClient) Extract(ctx context.Context, opts ...grpc.CallOption) (RawText_ExtractClient, error) {
	stream, err := c.cc.NewStream(ctx, &RawText_ServiceDesc.Streams[0], "/gika.RawText/Extract", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawTextExtractClient{stream}
	return x, nil
}

type RawText_ExtractClient interface {
	Send(*FileRequest) error
	Recv() (*RawTextReply, error)
	grpc.ClientStream
}

type rawTextExtractClient struct {
	grpc.ClientStream
}

func (x *rawTextExtractClient) Send(m *FileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rawTextExtractClient) Recv() (*RawTextReply, error) {
	m := new(RawTextReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RawTextServer is the server API for RawText service.
// All implementations must embed UnimplementedRawTextServer
// for forward compatibility
type RawTextServer interface {
	Extract(RawText_ExtractServer) error
	mustEmbedUnimplementedRawTextServer()
}

// UnimplementedRawTextServer must be embedded to have forward compatible implementations.
type UnimplementedRawTextServer struct {
}

func (UnimplementedRawTextServer) Extract(RawText_ExtractServer) error {
	return status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedRawTextServer) mustEmbedUnimplementedRawTextServer() {}

// UnsafeRawTextServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RawTextServer will
// result in compilation errors.
type UnsafeRawTextServer interface {
	mustEmbedUnimplementedRawTextServer()
}

func RegisterRawTextServer(s grpc.ServiceRegistrar, srv RawTextServer) {
	s.RegisterService(&RawText_ServiceDesc, srv)
}

func _RawText_Extract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RawTextServer).Extract(&rawTextExtractServer{stream})
}

type RawText_ExtractServer interface {
	Send(*RawTextReply) error
	Recv() (*FileRequest, error)
	grpc.ServerStream
}

type rawTextExtractServer struct {
	grpc.ServerStream
}

func (x *rawTextExtractServer) Send(m *RawTextReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rawTextExtractServer) Recv() (*FileRequest, error) {
	m := new(FileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RawText_ServiceDesc is the grpc.ServiceDesc for RawText service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RawText_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gika.RawText",
	HandlerType: (*RawTextServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Extract",
			Handler:       _RawText_Extract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/rawtext.proto",
}
